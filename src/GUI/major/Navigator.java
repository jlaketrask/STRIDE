package GUI.major;

import coreEngine.Helper.CEConst;
import coreEngine.Seed;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.util.HashMap;
import javax.swing.JCheckBox;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTextArea;
import javax.swing.event.PopupMenuEvent;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

/**
 * This class contains the navigator tree of all opened Seed objects.
 *
 * @author Shu Liu
 */
public class Navigator extends javax.swing.JPanel {

    private MainWindow mainWindow;
    private final DefaultTreeModel seedTreeModel;
    private boolean showATDMUnderScen = true;
    private boolean showATDMStandalone = true;
    private boolean reloadLock = false;
    private final static int ROOT_NODE = 0, PROJECT_NODE = 1, SEED_NODE = 2, RL_SCENARIO_NODE = 3, ATDM_SCENARIO_NODE = 4, GROUP_NODE = 5;
    private final JPopupMenu tooltip = new JPopupMenu();
    private final static int TOOLTIP_OFFSET = 150;
    private boolean popupLock = false;
    private HashMap<String, Boolean> nodeExpandMap;

    /**
     * Creates new form Navigator
     */
    public Navigator() {
        initComponents();

        TreeNodeWithNameAndStyle seedRootNode = new TreeNodeWithNameAndStyle(new NodeInfo(null, 0, -1), ROOT_NODE);
        seedTreeModel = new DefaultTreeModel(seedRootNode);
        seedJTree.setModel(seedTreeModel);
    }

    /**
     * Update navigator tree after a seed added
     *
     * @param seed seed added
     */
    public void seedAdded(Seed seed) {
        addSeedToTree((TreeNodeWithNameAndStyle) seedTreeModel.getRoot(), seed);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        seedJTree = new javax.swing.JTree();

        jScrollPane1.setBorder(null);

        seedJTree.setRootVisible(false);
        seedJTree.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                seedJTreeMouseMoved(evt);
            }
        });
        seedJTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                seedJTreeMouseClicked(evt);
            }
        });
        seedJTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                seedJTreeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(seedJTree);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 644, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void seedJTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_seedJTreeValueChanged
        selectSeedScen();
    }//GEN-LAST:event_seedJTreeValueChanged

    private void seedJTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_seedJTreeMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON3) {
            JPopupMenu menu = new JPopupMenu();
            menu.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
                @Override
                public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                    popupLock = false;
                }

                @Override
                public void popupMenuWillBecomeVisible(PopupMenuEvent e) {
                }

                @Override
                public void popupMenuCanceled(PopupMenuEvent e) {
                }
            });

            final TreePath path = seedJTree.getPathForLocation(evt.getX(), evt.getY());
            if (path != null) {
                final TreeNodeWithNameAndStyle nodeSelected = (TreeNodeWithNameAndStyle) path.getLastPathComponent();
                Rectangle pathBounds = seedJTree.getUI().getPathBounds(seedJTree, path);

                if (nodeSelected != null) {
                    JMenuItem renameMenuItem;
                    JMenuItem addCompareMenuItem;

                    switch (nodeSelected.getType()) {
                        case PROJECT_NODE:
                            renameMenuItem = new JMenuItem("Rename Project");
                            renameMenuItem.addActionListener(new java.awt.event.ActionListener() {
                                @Override
                                public void actionPerformed(java.awt.event.ActionEvent evt) {
                                    renameProjectMenuItemActionPerformed(nodeSelected, path);
                                }
                            });
                            menu.add(renameMenuItem);
                            menu.add(new javax.swing.JSeparator());
                            break;
                        case SEED_NODE:
                            addCompareMenuItem = new JMenuItem("Add Seed to Compare");
                            addCompareMenuItem.addActionListener(new java.awt.event.ActionListener() {
                                @Override
                                public void actionPerformed(java.awt.event.ActionEvent evt) {
                                    addNodeCompareMenuItemActionPerformed(nodeSelected);
                                }
                            });
                            menu.add(addCompareMenuItem);
                            menu.add(new javax.swing.JSeparator());
                            break;
                        case RL_SCENARIO_NODE:
                            renameMenuItem = new JMenuItem("Rename RL Scenario");
                            renameMenuItem.addActionListener(new java.awt.event.ActionListener() {
                                @Override
                                public void actionPerformed(java.awt.event.ActionEvent evt) {
                                    renameScenarioMenuItemActionPerformed(nodeSelected, path);
                                }
                            });
                            menu.add(renameMenuItem);

                            addCompareMenuItem = new JMenuItem("Add RL Scenario to Compare");
                            addCompareMenuItem.addActionListener(new java.awt.event.ActionListener() {
                                @Override
                                public void actionPerformed(java.awt.event.ActionEvent evt) {
                                    addNodeCompareMenuItemActionPerformed(nodeSelected);
                                }
                            });
                            menu.add(addCompareMenuItem);
                            menu.add(new javax.swing.JSeparator());
                            break;
                        case ATDM_SCENARIO_NODE:
                            addCompareMenuItem = new JMenuItem("Add ATDM Scenario to Compare");
                            addCompareMenuItem.addActionListener(new java.awt.event.ActionListener() {
                                @Override
                                public void actionPerformed(java.awt.event.ActionEvent evt) {
                                    addNodeCompareMenuItemActionPerformed(nodeSelected);
                                }
                            });
                            menu.add(addCompareMenuItem);
                            menu.add(new javax.swing.JSeparator());
                            break;
                    }
                }

                final JCheckBox showATDMUnderScenCB = new JCheckBox("Show ATDM Under Each RL Scenario");
                showATDMUnderScenCB.setSelected(showATDMUnderScen);
                showATDMUnderScenCB.addActionListener(new java.awt.event.ActionListener() {
                    @Override
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        showATDMUnderScen = showATDMUnderScenCB.isSelected();
                        configAllProjectNodes();
                    }
                });
                menu.add(showATDMUnderScenCB);

                final JCheckBox showATDMStandaloneCB = new JCheckBox("Show ATDM as New Branch");
                showATDMStandaloneCB.setSelected(showATDMStandalone);
                showATDMStandaloneCB.addActionListener(new java.awt.event.ActionListener() {
                    @Override
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        showATDMStandalone = showATDMStandaloneCB.isSelected();
                        configAllProjectNodes();
                    }
                });
                menu.add(showATDMStandaloneCB);

                popupLock = true;
                menu.show(seedJTree, pathBounds.x, pathBounds.y + pathBounds.height);
            }
        }
    }//GEN-LAST:event_seedJTreeMouseClicked

    private void seedJTreeMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_seedJTreeMouseMoved
        tooltip.removeAll();
        tooltip.setVisible(false);
        if (!popupLock) {
            final TreePath path = seedJTree.getPathForLocation(evt.getX(), evt.getY());
            if (path == null) {
                return;
            }

            final TreeNodeWithNameAndStyle nodeSelected = (TreeNodeWithNameAndStyle) path.getLastPathComponent();
            Rectangle pathBounds = seedJTree.getUI().getPathBounds(seedJTree, path);

            if (nodeSelected != null) {
                int scen;
                int atdm;
                String text;
                switch (nodeSelected.getType()) {
                    case RL_SCENARIO_NODE:
                        scen = ((NodeInfo) nodeSelected.getUserObject()).scen;
                        text = ((NodeInfo) nodeSelected.getUserObject()).seed
                                .getValueString(CEConst.IDS_SCEN_DETAIL, 0, 0, scen, -1);
                        if (text != null) {
                            tooltip.add(new JTextArea(text));
                            tooltip.show(seedJTree, pathBounds.x + TOOLTIP_OFFSET, pathBounds.y); //+ pathBounds.height
                        }
                        break;
                    case ATDM_SCENARIO_NODE:
                        atdm = ((NodeInfo) nodeSelected.getUserObject()).atdm;
                        scen = ((NodeInfo) nodeSelected.getUserObject()).scen;
                        text = ((NodeInfo) nodeSelected.getUserObject()).seed
                                .getValueString(CEConst.IDS_ATDM_DETAIL, 0, 0, scen, atdm);
                        if (text != null) {
                            tooltip.add(new JTextArea(text));
                            tooltip.show(seedJTree, pathBounds.x + TOOLTIP_OFFSET, pathBounds.y); //+ pathBounds.height
                        }
                        break;
                }
            }
        }
    }//GEN-LAST:event_seedJTreeMouseMoved

    private void renameProjectMenuItemActionPerformed(TreeNodeWithNameAndStyle node, TreePath path) {
        String input = JOptionPane.showInputDialog(mainWindow, "Enter new project name:",
                ((NodeInfo) node.getUserObject()).seed.getValueString(CEConst.IDS_PROJECT_NAME));
        if (input != null) {
            ((NodeInfo) node.getUserObject()).seed.setValue(CEConst.IDS_PROJECT_NAME, input);
            node.setDisplayText(input);
            update2();
            seedJTree.setSelectionRow(seedJTree.getRowForPath(path));
            mainWindow.printLog("Project Renamed");
        }
    }

    private void renameScenarioMenuItemActionPerformed(TreeNodeWithNameAndStyle node, TreePath path) {
        String input = JOptionPane.showInputDialog(mainWindow, "Enter new scenario name:",
                ((NodeInfo) node.getUserObject()).seed.getValueString(CEConst.IDS_SCEN_NAME, 0, 0, ((NodeInfo) node.getUserObject()).scen, -1));
        if (input != null) {
            ((NodeInfo) node.getUserObject()).seed.setValue(CEConst.IDS_SCEN_NAME, input, 0, 0, ((NodeInfo) node.getUserObject()).scen, -1);
            node.setDisplayText("Scen#" + ((NodeInfo) node.getUserObject()).scen + " " + input);
            update2();
            seedJTree.setSelectionRow(seedJTree.getRowForPath(path));
            mainWindow.printLog("Scenario Renamed");
        }
    }

    private void addNodeCompareMenuItemActionPerformed(TreeNodeWithNameAndStyle node) {
        String displayString = ((NodeInfo) node.getUserObject()).seed.getValueString(CEConst.IDS_PROJECT_NAME);

        switch (node.type) {
            case SEED_NODE:
            case PROJECT_NODE:
                displayString += " - Seed";
                break;
            case RL_SCENARIO_NODE:
                displayString += " - Reliability Scenario #" + ((NodeInfo) node.getUserObject()).scen;
                break;
            case ATDM_SCENARIO_NODE:
                displayString += " - ATDM Set #" + (((NodeInfo) node.getUserObject()).atdm + 1) + " Scenario #" + ((NodeInfo) node.getUserObject()).scen;
                break;
        }
        mainWindow.addScenarioToCompare(((NodeInfo) node.getUserObject()).seed, ((NodeInfo) node.getUserObject()).scen, ((NodeInfo) node.getUserObject()).atdm, displayString);
    }

    private void selectSeedScen() {
        if (!reloadLock) {
            TreeNodeWithNameAndStyle node = (TreeNodeWithNameAndStyle) seedJTree.getLastSelectedPathComponent();

            if (node != null) {
                Seed seed = ((NodeInfo) node.getUserObject()).seed; //seed
                int scen = ((NodeInfo) node.getUserObject()).scen; //scenario index
                int atdm = ((NodeInfo) node.getUserObject()).atdm; //atdm index
                mainWindow.selectSeedScen(seed, scen, atdm);
            } else {
                mainWindow.selectSeedScen(null, 0);
            }
        }
    }

    private void update2() {
        nodeExpandMap = new HashMap();
        recordStatus((TreeNodeWithNameAndStyle) seedTreeModel.getRoot());

        reloadLock = true;
        seedTreeModel.reload();
        reloadLock = false;

        reloadStatus((TreeNodeWithNameAndStyle) seedTreeModel.getRoot());

        nodeExpandMap = null;
    }

    private void recordStatus(TreeNodeWithNameAndStyle node) {
        nodeExpandMap.put(node.getUserObject().toString() + node.type, seedJTree.isExpanded(new TreePath(node.getPath())));
        //System.out.println("Record: " + ((NodeInfo) node.getUserObject()) + " " + seedJTree.isExpanded(new TreePath(node.getPath())));
        for (int i = 0; i < node.getChildCount(); i++) {
            recordStatus((TreeNodeWithNameAndStyle) node.getChildAt(i));
        }
    }

    private void reloadStatus(TreeNodeWithNameAndStyle node) {
        if (nodeExpandMap.get(node.getUserObject().toString() + node.type) != null
                ? nodeExpandMap.get(node.getUserObject().toString() + node.type) : true) {
            seedJTree.expandPath(new TreePath(node.getPath()));
        }
        for (int i = 0; i < node.getChildCount(); i++) {
            reloadStatus((TreeNodeWithNameAndStyle) node.getChildAt(i));
        }
    }

    private void addSeedToTree(TreeNodeWithNameAndStyle rootNode, Seed seed) {
        nodeExpandMap = new HashMap();
        recordStatus((TreeNodeWithNameAndStyle) seedTreeModel.getRoot());

        //add new project node
        TreeNodeWithNameAndStyle projectNode = new TreeNodeWithNameAndStyle(new NodeInfo(seed, 0, -1), PROJECT_NODE);

        configProjectNode(projectNode);

        seedTreeModel.insertNodeInto(projectNode, rootNode, rootNode.getChildCount());

        reloadLock = true;
        seedTreeModel.reload();
        reloadLock = false;
        reloadStatus((TreeNodeWithNameAndStyle) seedTreeModel.getRoot());
        nodeExpandMap = null;

        seedJTree.setSelectionPath(new TreePath(projectNode.getPath()));
    }

    private void configProjectNode(TreeNodeWithNameAndStyle projectNode) {
        Seed seed = ((NodeInfo) projectNode.getUserObject()).seed;
        projectNode.setDisplayText(seed.getValueString(CEConst.IDS_PROJECT_NAME));
        projectNode.removeAllChildren();

        //add seed node
        TreeNodeWithNameAndStyle seedNode;
        seedNode = new TreeNodeWithNameAndStyle(new NodeInfo(seed, 0, -1), SEED_NODE);
        seedNode.setDisplayText("Seed");
        seedTreeModel.insertNodeInto(seedNode, projectNode, projectNode.getChildCount());

        if (seed.getValueInt(CEConst.IDS_NUM_SCEN) > 0) {
            //add scenario node
            TreeNodeWithNameAndStyle scenarioNode;

            TreeNodeWithNameAndStyle rlGroupNode = new TreeNodeWithNameAndStyle(new NodeInfo(seed, 0, -1), GROUP_NODE);
            rlGroupNode.setDisplayText("Reliability Scenarios (" + seed.getValueInt(CEConst.IDS_NUM_SCEN) + ")");
            seedTreeModel.insertNodeInto(rlGroupNode, projectNode, projectNode.getChildCount());

            for (int scenIndex = 1; scenIndex <= seed.getValueInt(CEConst.IDS_NUM_SCEN); scenIndex++) {
                scenarioNode = new TreeNodeWithNameAndStyle(new NodeInfo(seed, scenIndex, -1), RL_SCENARIO_NODE);
                scenarioNode.setDisplayText("Scen#" + scenIndex + " " + seed.getValueString(CEConst.IDS_SCEN_NAME, 0, 0, scenIndex, -1));

                if (showATDMUnderScen) {
                    //add atdm node
                    for (int atdmIndex = 0; atdmIndex < seed.getATDMSets().size(); atdmIndex++) {
                        if (seed.getATDMSets().get(atdmIndex).get(scenIndex) != null) {
                            TreeNodeWithNameAndStyle ATDMNode = new TreeNodeWithNameAndStyle(new NodeInfo(seed, scenIndex, atdmIndex), ATDM_SCENARIO_NODE);
                            ATDMNode.setDisplayText("ATDM #" + (atdmIndex + 1) + " " + seed.getValueString(CEConst.IDS_ATDM_NAME, 0, 0, scenIndex, atdmIndex));
                            seedTreeModel.insertNodeInto(ATDMNode, scenarioNode, scenarioNode.getChildCount());
                        }
                    }
                }

                seedTreeModel.insertNodeInto(scenarioNode, rlGroupNode, rlGroupNode.getChildCount());
            }
        }

        if (showATDMStandalone && seed.getValueInt(CEConst.IDS_ATDM_SET_NUM) > 0) {
            for (int atdmIndex = 0; atdmIndex < seed.getValueInt(CEConst.IDS_ATDM_SET_NUM); atdmIndex++) {
                //add atdm node
                TreeNodeWithNameAndStyle atdmGroupNode = new TreeNodeWithNameAndStyle(new NodeInfo(seed, 0, -1), GROUP_NODE);
                atdmGroupNode.setDisplayText("ATDM Set #" + (atdmIndex + 1) + " (" + seed.getValueString(CEConst.IDS_ATDM_SCEN_IN_EACH_SET, 0, 0, 0, atdmIndex) + ")");
                seedTreeModel.insertNodeInto(atdmGroupNode, projectNode, projectNode.getChildCount());

                for (int scenIndex = 1; scenIndex <= seed.getValueInt(CEConst.IDS_NUM_SCEN); scenIndex++) {
                    if (seed.getATDMSets().get(atdmIndex).get(scenIndex) != null) {
                        TreeNodeWithNameAndStyle ATDMNode = new TreeNodeWithNameAndStyle(new NodeInfo(seed, scenIndex, atdmIndex), ATDM_SCENARIO_NODE);
                        ATDMNode.setDisplayText("Scen #" + scenIndex + " " + seed.getValueString(CEConst.IDS_ATDM_NAME, 0, 0, scenIndex, atdmIndex));
                        seedTreeModel.insertNodeInto(ATDMNode, atdmGroupNode, atdmGroupNode.getChildCount());
                    }
                }
            }
        }
    }

    private void configAllProjectNodes() {
        nodeExpandMap = new HashMap();
        recordStatus((TreeNodeWithNameAndStyle) seedTreeModel.getRoot());
        //TreePath lastPath = seedJTree.getSelectionPath();

        TreeNodeWithNameAndStyle root = (TreeNodeWithNameAndStyle) seedTreeModel.getRoot();
        int seedRow = 0;
        while (seedRow < root.getChildCount()) {
            configProjectNode((TreeNodeWithNameAndStyle) root.getChildAt(seedRow));
            seedRow++;
        }

        reloadLock = true;
        seedTreeModel.reload();
        reloadLock = false;

        reloadStatus((TreeNodeWithNameAndStyle) seedTreeModel.getRoot());
        nodeExpandMap = null;

        seedJTree.setSelectionRow(0);
    }

    /**
     * Close currently selected seed
     *
     * @return whether close successful
     */
    public String closeSeed() {
        TreeNodeWithNameAndStyle node = (TreeNodeWithNameAndStyle) seedJTree.getLastSelectedPathComponent();

        if (node != null) {
            nodeExpandMap = new HashMap();
            recordStatus((TreeNodeWithNameAndStyle) seedTreeModel.getRoot());

            //find project node
            while (node.getType() != PROJECT_NODE) {
                node = (TreeNodeWithNameAndStyle) node.getParent();
            }

            if (!mainWindow.getSeedList().remove(((NodeInfo) node.getUserObject()).seed)) {
                return "Fail to close seed (internal error)";
            }

            seedTreeModel.removeNodeFromParent(node);

            reloadLock = true;
            seedTreeModel.reload();
            reloadLock = false;
            reloadStatus((TreeNodeWithNameAndStyle) seedTreeModel.getRoot());
            nodeExpandMap = null;
            seedJTree.setSelectionRow(0);

            return "Seed closed";
        } else {
            return "Fail to close seed (no seed selected)";
        }
    }

    /**
     * Update seed tree
     *
     * @param seed seed to be updated
     */
    public void updateSeed(Seed seed) {
        String previousSelected = ((TreeNodeWithNameAndStyle) seedJTree.getLastSelectedPathComponent()).getUserObject().toString();

        if (seed != null) {

            TreeNodeWithNameAndStyle root = (TreeNodeWithNameAndStyle) seedTreeModel.getRoot();
            int seedRow = 0;
            while (seedRow < root.getChildCount()) {
                if (((NodeInfo) ((TreeNodeWithNameAndStyle) root.getChildAt(seedRow)).getUserObject()).seed.equals(seed)) {
                    //seed found in tree
                    nodeExpandMap = new HashMap();
                    recordStatus((TreeNodeWithNameAndStyle) seedTreeModel.getRoot());

                    configProjectNode((TreeNodeWithNameAndStyle) root.getChildAt(seedRow));

                    reloadLock = true;
                    seedTreeModel.reload();
                    reloadStatus((TreeNodeWithNameAndStyle) seedTreeModel.getRoot());
                    nodeExpandMap = null;

                    if (reselectNode((TreeNodeWithNameAndStyle) root.getChildAt(seedRow), previousSelected)) {
                        reloadLock = false;
                    } else {
                        reloadLock = false;
                        seedJTree.setSelectionPath(new TreePath(((TreeNodeWithNameAndStyle) root.getChildAt(seedRow)).getPath()));
                    }
                    return;
                }
                seedRow++;
            }
        }
    }

    private boolean reselectNode(TreeNodeWithNameAndStyle node, String previousSelected) {
        if (node.getUserObject().toString().equals(previousSelected)) {
            seedJTree.setSelectionPath(new TreePath(((DefaultTreeModel) seedJTree.getModel()).getPathToRoot(node)));
            return true;
        } else {
            for (int i = 0; i < node.getChildCount(); i++) {
                if (reselectNode((TreeNodeWithNameAndStyle) node.getChildAt(i), previousSelected)) {
                    return true;
                }
            }
            return false;
        }
    }

    // <editor-fold defaultstate="collapsed" desc="setter and getters">
    /**
     * Setter for mainWindow connection
     *
     * @param mainWindow main window instance
     */
    public void setMainWindow(MainWindow mainWindow) {
        this.mainWindow = mainWindow;

            for (Seed seed : mainWindow.getSeedList()) {
                addSeedToTree((TreeNodeWithNameAndStyle) seedTreeModel.getRoot(), seed);
            }
        }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Inner Helper Classes">
    private class TreeNodeWithNameAndStyle extends DefaultMutableTreeNode {

        /**
         * Constructor
         *
         * @param userObject object represented by this tree node
         * @param type type of the node
         */
        TreeNodeWithNameAndStyle(NodeInfo userObject, int type) {
            super(userObject);
            this.type = type;
            this.setAllowsChildren(true);
        }

        /**
         * Getter for display text
         *
         * @return display text
         */
        String getDisplayText() {
            return displayText;
        }

        /**
         * Setter for display text
         *
         * @param displayText display text
         */
        void setDisplayText(String displayText) {
            this.displayText = displayText;
        }

        /**
         * Getter for node type
         *
         * @return node type
         */
        int getType() {
            return type;
        }

        private String displayText = "";
        private final int type;

        @Override
        public String toString() {
            return displayText;
        }
    }

    private class NodeInfo {

        final Seed seed;
        final int scen;
        final int atdm;

        NodeInfo(Seed seed, int scen, int atdm) {
            this.seed = seed;
            this.scen = scen;
            this.atdm = atdm;
        }

        @Override
        public String toString() {
            return seed + " " + scen + " " + atdm;
        }
    }
    // </editor-fold>

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree seedJTree;
    // End of variables declaration//GEN-END:variables
}
